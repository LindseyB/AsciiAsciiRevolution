<html><head>
	<META http-equiv="content-type" content="text/html; charset=utf-8">
	<title>panel</title>
	</head><body>
	<h1>panel</h1>
	<!-- Generated by Ddoc from ../modules/panel.d -->
<b>Authors:</b><br>
Jon "ylixir" Allen, ylixir@gmail.com
<br><br>
<b>License:</b><br>
Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:
<br><br>

    The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.
<br><br>

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
IN THE SOFTWARE.
<br><br>

<dl><dt><big>PANEL* <u>new_panel</u>(WINDOW* <i>win</i>);
</big></dt>
<dd>Allocates a panel structure, associates it with a window, and places
it at the top of the stack.
<br><br>
<b>Returns:</b><br>
A pointer to a panel when successful and <b>null</b> when not.
<br><br>
<b>See Also:</b><br>
man panel
<br><br>

</dd>
<dt><big>int <u>bottom_panel</u>(PANEL* <i>pan</i>);
</big></dt>
<dd>Moves panel to the bottom of the stack.
<br><br>
<b>Returns:</b><br>
<i>OK</i> when successful and <i>ERR</i> when not.
<br><br>
<b>See Also:</b><br>
man panel
<br><br>

</dd>
<dt><big>int <u>top_panel</u>(PANEL* <i>pan</i>);
</big></dt>
<dd>Moves panel to the top of the stack.
<br><br>
<b>Returns:</b><br>
<i>OK</i> when successful and <i>ERR</i> when not.
<br><br>
<b>See Also:</b><br>
man panel
<br><br>

</dd>
<dt><big>int <u>show_panel</u>(PANEL* <i>pan</i>);
</big></dt>
<dd>Makes a panel visible by placeing it on the top of the stack.
<br><br>
<b>Returns:</b><br>
<i>OK</i> when successful and <i>ERR</i> when not.
<br><br>
<b>See Also:</b><br>
man panel
<br><br>

</dd>
<dt><big>void <u>update_panels</u>();
</big></dt>
<dd>Refreshes the virtual screen, but not the physical screen. Use with
doupdate instead of refresh or wrefresh.
<br><br>
<b>See Also:</b><br>
man panel
<br><br>

</dd>
<dt><big>int <u>hide_panel</u>(PANEL* <i>pan</i>);
</big></dt>
<dd>Hides a panel by removing it from the stack.
<br><br>
<b>Returns:</b><br>
<i>OK</i> when successful and <i>ERR</i> when not.
<br><br>
<b>See Also:</b><br>
man panel
<br><br>

</dd>
<dt><big>WINDOW* <u>panel_window</u>(PANEL* <i>pan</i>);
</big></dt>
<dd>Get the window associated with the panel.
<br><br>
<b>Returns:</b><br>
A pointer to a panel when successful and <b>null</b> when not.
<br><br>
<b>See Also:</b><br>
man panel
<br><br>

</dd>
<dt><big>int <u>replace_panel</u>(PANEL* <i>pan</i>, WINDOW* <i>window</i>);
</big></dt>
<dd>Replace a panels associated <i>window</i> with another.
<br><br>
<b>Returns:</b><br>
<i>OK</i> when successful and <i>ERR</i> when not.
<br><br>
<b>See Also:</b><br>
man panel
<br><br>

</dd>
<dt><big>int <u>move_panel</u>(PANEL* <i>pan</i>, int <i>starty</i>, int <i>startx</i>);
</big></dt>
<dd>Move a panel along the screens plane, but don't change it's z-order.
<br><br>
<b>Returns:</b><br>
<i>OK</i> when successful and <i>ERR</i> when not.
<br><br>
<b>See Also:</b><br>
man panel
<br><br>

</dd>
<dt><big>int <u>panel_hidden</u>(PANEL* <i>pan</i>);
</big></dt>
<dd>Check and see if the panel is on the stack anywhere.
<br><br>
<b>See Also:</b><br>
man panel
<br><br>

</dd>
<dt><big>PANEL* <u>panel_above</u>(PANEL* <i>pan</i>);
</big></dt>
<dd>Get the panel above the given panel on the stack.
<br><br>
<b>Returns:</b><br>
A pointer to a panel when successful and <b>null</b> when not.
<br><br>
<b>See Also:</b><br>
man panel
<br><br>

</dd>
<dt><big>PANEL* <u>panel_below</u>(PANEL* <i>pan</i>);
</big></dt>
<dd>Get the panel below the given panel on the stack.
<br><br>
<b>Returns:</b><br>
A pointer to a panel when successful and <b>null</b> when not.
<br><br>
<b>See Also:</b><br>
man panel
<br><br>

</dd>
<dt><big>int <u>set_panel_userptr</u>(PANEL* <i>pan</i>, void* <i>ptr</i>);
<br>void* <u>panel_userptr</u>(PANEL* <i>pan</i>);
</big></dt>
<dd>Retrieve/store the panel user pointer.
<br><br>
<b>See Also:</b><br>
man panel
<br><br>

</dd>
<dt><big>int <u>del_panel</u>(PANEL* <i>pan</i>);
</big></dt>
<dd>Remove a panel from the stack and free the memory with it (but not
the associated window).
<br><br>
<b>Returns:</b><br>
<i>OK</i> when successful and <i>ERR</i> when not.
<br><br>
<b>See Also:</b><br>
man panel
<br><br>

</dd>
</dl>

	<hr><small>Page generated by <a href="http://www.digitalmars.com/d/1.0/ddoc.html">Ddoc</a>. Copyright (c) 2008 ylixir. All rights reserved.
</small>
	</body></html>
